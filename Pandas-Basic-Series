# More on Data Frame

#import dataframe as df
#To see number of rows and cols
 > print(dataset.shape)
 > print(df.shape)
 > print(df.shape)
#To see number of col
 > len(df.columns)

# To see the top 5 rows of csv data 
!head -n 5 filename.csv

# Inspection of the DataFrame,  getting basic information about your DataFrame -- 
1.info()  --- no of columns, rows, ram uses
dataframename.info()
2. dtypes  --- data types of the columns
dataframe.dtypes
3. describe() -- seeing basic statistics about the dataset's numeric columns. 
dataframename.describes()
Be careful though, since this will return information on all columns of a numeric datatype.
4. head() -- by default, head displays the first five records of the dataset, while tail displays the last five.
dataframename.head()
5. tail()
dataframename.tail()

# Selecting the DataFrame operations
You can think of a DataFrame as a group of Series that share an index (in this case the column headers). 
This makes it easy to select specific columns.
Selecting a single column from the DataFrame will return a Series object.

#  Using iloc, loc, & ix to select rows and columns in Pandas DataFrames
hit this link- https://www.shanelynn.ie/select-pandas-dataframe-rows-and-columns-using-iloc-loc-and-ix/
  # Little more concept
  1. Selecting pandas data using “iloc”
  The iloc indexer for Pandas Dataframe is used for integer-location based indexing / selection by position.
  There are two “arguments” to iloc – a row selector, and a column selector.
  example - 
  # Single selections using iloc and DataFrame
# Rows:
 > data.iloc[0] # first row of data frame (Aleshia Tomkiewicz) - Note a Series data type output.
 > data.iloc[1] # second row of data frame (Evan Zigomalas)
 > data.iloc[-1] # last row of data frame (Mi Richan)
# Columns:
 > data.iloc[:,0] # first column of data frame (first_name)
 > data.iloc[:,1] # second column of data frame (last_name)
 > data.iloc[:,-1] # last column of data frame (id)

Multiple columns and rows can be selected together using the .iloc indexer.
# Multiple row and column selections using iloc and DataFrame
 > data.iloc[0:5] # first five rows of dataframe
 > data.iloc[:, 0:2] # first two columns of data frame with all rows
 > data.iloc[[0,3,6,24], [0,5,6]] # 1st, 4th, 7th, 25th row + 1st 6th 7th columns.
 > data.iloc[0:5, 5:8] # first 5 rows and 5th, 6th, 7th columns of data frame (county -> phone1).

There’s two gotchas to remember when using iloc in this manner:

1. Note that .iloc returns a Pandas Series when one row is selected, and a Pandas DataFrame when multiple rows are selected, 
   or if any column in full is selected. To counter this, pass a single-valued list if you require DataFrame output.
2. When selecting multiple columns or multiple rows in this manner, remember that in your selection e.g.[1:5],
   the rows/columns selected will run from the first number to one minus the second number.
   e.g. [1:5] will go 1,2,3,4., [x,y] goes from x to y-1.
3. In practice, I rarely use the iloc indexer, unless I want the first ( .iloc[0] ) or the last ( .iloc[-1] )  
   row of the data frame.
   
2. Selecting pandas data using “loc”

The Pandas loc indexer can be used with DataFrames for two different use cases:

    a.) Selecting rows by label/index
    b.) Selecting rows with a boolean / conditional lookup

The loc indexer is used with the same syntax as iloc: data.loc[<row selection>, <column selection>] .
2a. Label-based / Index-based indexing using .loc

Selections using the loc method are based on the index of the data frame (if any). Where the index is set on a DataFrame,
using <code>df.set_index()</code>, the .loc method directly selects based on index values of any rows. For example, 
setting the index of our test data frame to the persons “last_name”:
 > data.set_index("last_name", inplace=True)
 > data.head()
Select columns with .loc using the names of the columns. In most of my data work, 
   typically I have named columns, and use these named selections.

Example:-You can select ranges of index labels – the selection </code>data.loc[‘Bruch’:’Julio’]</code> will return all rows in
the data frame between the index entries for “Bruch” and “Julio”. 
The following examples should now make sense:
  # Select rows with index values 'Andrade' and 'Veness', with all columns between 'city' and 'email'
    > data.loc[['Andrade', 'Veness'], 'city':'email']
  # Select same rows, with just 'first_name', 'address' and 'city' columns
    > data.loc['Andrade':'Veness', ['first_name', 'address', 'city']]
    
2b. Boolean / Logical indexing using .loc
  Conditional selections with boolean arrays using data.loc[<selection>] is the most common method that
  I use with Pandas DataFrames. With boolean indexing or logical selection, you pass an array or Series of
  True/False values to the .loc indexer to select the rows where your Series has True values.
    > data.loc[data['first name'] == ‘Antonio’]


3. Selecting pandas data using ix
  Note: The ix indexer has been deprecated in recent versions of Pandas, starting with version 0.20.1.
  The ix[] indexer is a hybrid of .loc and .iloc. Generally, ix is label based and acts just as the .loc indexer. 
  However, .ix also supports integer type selections (as in .iloc) where passed an integer. This only works where the index of the DataFrame is not integer based. ix will accept any of the inputs of .loc and .iloc.
  Slightly more complex, I prefer to explicitly use .iloc and .loc to avoid unexpected results.
  # ix indexing works just the same as .loc when passed strings
     > data.ix[['Andrade']] == data.loc[['Andrade']]
  # ix indexing works the same as .iloc when passed integers.
     > data.ix[[33]] == data.iloc[[33]]
 
  # ix only works in both modes when the index of the DataFrame is NOT an integer itself.
  
 
Other Example:-
  Setting values in DataFrames using .loc

  With a slight change of syntax, you can actually update your DataFrame in the same statement as you
  select and filter using .loc indexer. This particular pattern allows you to update values in columns depending on 
  different conditions. The setting operation does not make a copy of the data frame, but edits the original data.
  As an example:
  # Change the first name of all rows with an ID greater than 2000 to "John"
    > data.loc[data['id'] > 2000, "first_name"] = "John"

  # Change the first name of all rows with an ID greater than 2000 to "John"
    > data.loc[data['id'] > 2000, "first_name"] = "John"
  
  
  
  
# Change the index to be based on the 'id' column
data.set_index('id', inplace=True)
# select the row with 'id' = 487
data.loc[487]

# Split() 
firstname = 'md kamran kausar'.split(' ')[0]
o/p = md
second_name = 'md kamran kausar'.split(' ')[1]
o/p = kamran

# Format()
sales_recordes = {'price' : 3.24,
                   'num_item' : 4,
                   'person' : 'Chris'}
sales_statement = '{} bought {} items(s) at a price of {} each for a total of {}'
print(sales_statement.format(sales_record['person'],
                             sales_record['num_items'],
                             sales_record['price'],
                             sales_record['num_items'] * sales_record['price']))
                             
o/p = Chris bought 4 item(s) at a price of 3.24 each for a total of 12.96
# Unpacking in Python
x = ("Md", 'kamran', 'kausar')
f_name, m_name, l_name = x


# Series 
  *Series is a cross between a list and Dictionary
  *Easy way to visualize this is two columns of data.
  *The first is the special index, a lot like the dictionary keys.
  *While the second is your actual data.
  *It's important to note that the data column has a label of its own and can be retrieved using the ".name attribute".
  *This is different than with dictionaries and is useful when it comes to merging multiple columns of data.
  # See the Series Object
   * > import pandas as pd
   * > pd.Series?
   *Underneath panda stores series values in a typed array using the numpy library.This offers significant speed-up when processing data versus traditional python lists. 
# Handle missing values
> See Jupyter Note book for further details
